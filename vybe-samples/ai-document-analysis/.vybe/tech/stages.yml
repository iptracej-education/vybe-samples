# Stage-by-Stage Technology Installation Plan

stages:
  stage-1:
    name: "Basic Development Setup"
    description: "Core language, FastAPI, and basic document processing"
    required_tools:
      - Python 3.12+
      - uv package manager
      - FastAPI
      - Uvicorn
      - PyPDF2 or pdfplumber
      - python-multipart (file uploads)
      - OpenAI SDK
    install_commands:
      - "curl -LsSf https://astral.sh/uv/install.sh | sh"
      - "uv venv"
      - "source .venv/bin/activate"
      - "uv pip install fastapi uvicorn python-multipart openai pypdf2"
    validation_commands:
      - "python --version"
      - "uv --version"
      - "uvicorn --version"
    
  stage-2:
    name: "Enhanced Processing & Analysis"
    description: "Additional document formats and AI capabilities"
    required_tools:
      - python-docx (DOCX support)
      - beautifulsoup4 (HTML parsing)
      - markdown (Markdown processing)
      - instructor (structured extraction)
      - pydantic-ai
      - tiktoken (token counting)
    install_commands:
      - "uv pip install python-docx beautifulsoup4 markdown instructor pydantic-ai tiktoken"
    validation_commands:
      - "python -c 'import docx; print(\"DOCX support ready\")'"
      - "python -c 'import instructor; print(\"Instructor ready\")'"
    
  stage-3:
    name: "Database & Queue Setup"
    description: "PostgreSQL, Redis, and Celery for background processing"
    required_tools:
      - Docker & Docker Compose
      - PostgreSQL (via Docker)
      - Redis (via Docker)
      - Celery
      - psycopg2-binary
      - redis-py
      - alembic
    install_commands:
      - "uv pip install celery psycopg2-binary redis alembic"
      - "docker-compose up -d postgres redis"
      - "alembic init app/alembic"
      - "alembic upgrade head"
    validation_commands:
      - "docker ps | grep postgres"
      - "docker ps | grep redis"
      - "celery --version"
      
  stage-4:
    name: "Full Supabase & Advanced Features"
    description: "Complete Supabase stack and dashboard"
    required_tools:
      - Supabase (self-hosted)
      - Kong (API Gateway)
      - Vector (logging)
      - python-frontmatter
      - graphviz (workflow visualization)
    install_commands:
      - "uv pip install python-frontmatter graphviz"
      - "docker-compose -f docker-compose.supabase.yml up -d"
      - "docker-compose -f docker-compose.launchpad.yml up -d"
    validation_commands:
      - "curl http://localhost:3000 # Supabase Studio"
      - "curl http://localhost:8000 # Kong Gateway"
      
  stage-final:
    name: "Production Readiness"
    description: "Testing, monitoring, and deployment tools"
    required_tools:
      - pytest & test coverage
      - ruff (linting/formatting)
      - pyright (type checking)
      - Caddy (reverse proxy)
      - Production environment setup
    install_commands:
      - "uv pip install pytest pytest-asyncio pytest-cov ruff"
      - "npm install -g pyright"
      - "docker pull caddy:latest"
      - "cp .env.example .env.production"
    validation_commands:
      - "pytest --version"
      - "ruff --version"
      - "pyright --version"

# Progressive Enhancement Notes
progression_notes:
  stage_1_to_2:
    - "Add document format support incrementally"
    - "Test each format thoroughly before adding next"
    
  stage_2_to_3:
    - "Implement queue for long-running document processing"
    - "Move heavy AI operations to background tasks"
    
  stage_3_to_4:
    - "Integrate Supabase for auth and storage"
    - "Build analytics dashboard"
    
  stage_4_to_final:
    - "Add comprehensive test suite"
    - "Configure production deployment"
    - "Set up monitoring and alerting"

# Installation Order
installation_order:
  1: "Python & uv"
  2: "Core Python packages"
  3: "Docker & containers"
  4: "Database setup"
  5: "Background job processing"
  6: "Supabase stack"
  7: "Development tools"
  8: "Production tools"