services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: "${PROJECT_NAME}_api"
    depends_on:
      - db
      - redis
    ports:
      - "127.0.0.1:8080:8080"
    restart: always
    volumes:
      - ./../app/:/app
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DATABASE_HOST=${POSTGRES_HOST}
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_PORT=${POSTGRES_PORT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - BEDROCK_AWS_ACCESS_KEY_ID=${BEDROCK_AWS_ACCESS_KEY_ID}
      - BEDROCK_AWS_SECRET_ACCESS_KEY=${BEDROCK_AWS_SECRET_ACCESS_KEY}
      - BEDROCK_AWS_REGION=${BEDROCK_AWS_REGION}

  celery_worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.celery
    container_name: "${PROJECT_NAME}_celery_worker"
    depends_on:
      - api
    restart: always
    volumes:
      - ./../app:/app
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DATABASE_HOST=${POSTGRES_HOST}
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_PORT=${POSTGRES_PORT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - BEDROCK_AWS_ACCESS_KEY_ID=${BEDROCK_AWS_ACCESS_KEY_ID}
      - BEDROCK_AWS_SECRET_ACCESS_KEY=${BEDROCK_AWS_SECRET_ACCESS_KEY}
      - BEDROCK_AWS_REGION=${BEDROCK_AWS_REGION}

  #  caddy:
  #    container_name: "${PROJECT_NAME}_caddy"
  #    env_file:
  #      - ./.env
  #    image: caddy:latest
  #    ports:
  #      - "80:80"
  #      - "127.0.0.1:2019:2019"
  #      - "443:443"
  #    restart: always
  #    volumes:
  #      - ./Caddyfile:/etc/caddy/Caddyfile
  #      - /var/log/caddy:/var/log/caddy
  #      - caddy_config:/config
  #      - caddy_data:/data

  redis:
    container_name: "${PROJECT_NAME}_redis"
    healthcheck:
      interval: 30s
      retries: 5
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 10s
    image: redis:latest
    ports:
      - "127.0.0.1:6379:6379"
    restart: always
    volumes:
      - redis_data:/data

  db:
    container_name: supabase-db
    image: supabase/postgres:15.8.1.060
    restart: unless-stopped
    volumes:
      - ./volumes/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
      # Must be superuser to create event trigger
      - ./volumes/db/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql:Z
      # Must be superuser to alter reserved role
      - ./volumes/db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
      # Initialize the database settings with JWT_SECRET and JWT_EXP
      - ./volumes/db/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/99-jwt.sql:Z
      # PGDATA directory is persisted between restarts
      - db_data:/var/lib/postgresql/data:Z
      # Changes required for internal supabase data such as _analytics
      - ./volumes/db/_supabase.sql:/docker-entrypoint-initdb.d/migrations/97-_supabase.sql:Z
      # Changes required for Analytics support
      - ./volumes/db/logs.sql:/docker-entrypoint-initdb.d/migrations/99-logs.sql:Z
      # Changes required for Pooler support
      - ./volumes/db/pooler.sql:/docker-entrypoint-initdb.d/migrations/99-pooler.sql:Z
      # Use named volume to persist pgsodium decryption key between restarts
      - db_config:/etc/postgresql-custom
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "postgres",
          "-h",
          "localhost"
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP: ${JWT_EXPIRY}
    command:
      [
        "postgres",
        "-c",
        "config_file=/etc/postgresql/postgresql.conf",
        "-c",
        "log_min_messages=fatal" # prevents Realtime polling queries from appearing in logs
      ]

volumes:
  caddy_config:
  caddy_data:
  db_config:
  db_data:
  redis_data:

networks:
  default:
    driver: bridge
    external: true
    name: "${PROJECT_NAME}_network"
